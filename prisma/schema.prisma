generator client {
  provider = "prisma-client-js"
  engineType = "binary"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user { // Пользователи
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  password String
  salt String?
  role String // нужно присваивать user по умолчанию
  // date monitor
  create_date DateTime? @db.Timestamptz
  changed_date DateTime @updatedAt @db.Timestamptz
  // used in
  registrator registrator[]
  order order[]
}

model subscribe {
  id Int @id @default(autoincrement())  
  email String? @unique
  phone String? @unique
  agree Boolean
  city String?
  wish String?
  district String?
  // date monitor
  create_date DateTime? @db.Timestamptz
  changed_date DateTime @updatedAt @db.Timestamptz
}

model product { // Товары
    id Int @id @default(autoincrement())
    id_1c String @unique // <Ид>17afd8c7-fe09-11ec-9b62-50ebf624c538</Ид>
    name String
    name_1c String? //<Наименование>Kiddy Туфли зеленый 1006-773</Наименование>
    base_ed String // <БазоваяЕдиница Код="796" НаименованиеПолное="Штука" МеждународноеСокращение="PCE">
    // descriptions fields
    artikul String  // <Артикул>1006-773</Артикул>
    material_up String?
    material_inside String?
    material_podoshva String?
    main_color String?
    description String? // общее описание, например "густой мех, маломерят"
    sex Int? // пол обуви, 1 - мальчик, 2 - девочка, 3 - унисекс
    product_folder String? // папка элемента из справочника НСИ 
    public_web Boolean? // ВыгружатьВеб
    // foreign keys
    product_group product_group @relation(fields: [product_group_id], references: [id])
    product_group_id Int
    product_vid product_vid @relation(fields: [product_vid_id], references: [id])
    product_vid_id Int
    vid_modeli vid_modeli? @relation(fields: [vid_modeli_id], references: [id])
    vid_modeli_id Int?    
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    brend brend? @relation(fields: [brend_id], references: [id])
    brend_id Int?
    country country? @relation(fields: [country_id], references: [id])
    country_id Int?
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in
    price_registry price_registry[] //virtual
    qnt_registry qnt_registry[] //virtual
    image_registry image_registry[] //virtual
    qnt_price_registry qnt_price_registry[]
    cart cart[]
}

model product_desc_mapping { // маппинг дополнительных сведений между 1С и таблицей Product, Материал вверх = material_up
    id Int @id @default(autoincrement())
    id_1c String @unique // id в выгрузке import
    name_1c String
    field String // сопоставимое поле в таблице Product, например material_up
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
}

model vid_modeli { // Вид модели
    id Int @id @default(autoincrement())
    id_1c String? @unique // в файле Import нет кода, есть только имя
    name_1c String
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in
    product product[] //virtual
    qnt_price_registry qnt_price_registry[]
}


model product_group { // ТоварнаяГруппа - Зима тяжелая (-5 -30)
    id Int @id @default(autoincrement())
    id_1c String @unique
    name_1c String
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in
    product product[] //virtual
    qnt_price_registry qnt_price_registry[]
}

model product_vid { // ВидНоменклатуры - Обувь детская
    id Int @id @default(autoincrement())
    id_1c String? @unique // в файле Import нет кода, есть только имя
    name_1c String
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in
    product product[] //virtual
}

model size { // размеры - из <ХарактеристикаТовара> <Ид>a001d8e3-a3b3-11ed-b0d2-50ebf624c538</Ид>
    id Int @id @default(autoincrement())
    id_1c String @unique
    name_1c String    
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in
    price_registry price_registry[]
    qnt_registry qnt_registry[]
    qnt_price_registry qnt_price_registry[]
    cart cart[]
}

model store { // склады в 1С, они же магазины здесь 
    id Int @id @default(autoincrement())
    id_1c String @unique
    name_1c String    
    address String? // заполнять самим
    link_2gis String? // заполнять самим - URL
    phone String? // заполнять самим
    city String? // заполнять самим
    image_path String? // путь до картинки
    public Boolean? // показывать ли на сайте
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in 
    qnt_registry qnt_registry[]    
    qnt_price_registry qnt_price_registry[]
}

model price_vid { // типы цен - Розничная (РФ-Китай) до 3500
    id Int @id @default(autoincrement())
    id_1c String @unique
    name_1c String  
    active Boolean? // использовать ли этот пункт как розничную
    active_change_date DateTime @db.Timestamptz 
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in
    qnt_price_registry qnt_price_registry[]
}

model brend { // справочник брендов
    id Int @id @default(autoincrement())
    id_1c String @unique
    name_1c String  
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in
    product product[]
}

model country { // справочник страна производства
    id Int @id @default(autoincrement())
    id_1c String @unique
    name_1c String
    // foreign keys
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in
    product product[]    
}


model price_registry { // регистр цен себестоимости
    id Int @id @default(autoincrement())
    sum Float
    operation_date DateTime @db.Timestamptz
    discount_percent Decimal?
    discount_begin DateTime? @db.Timestamptz
    discount_end DateTime? @db.Timestamptz
    product_name_1c String
    product_artikul String?
    product_id_1c String
    size_name_1c String
    price_vid_name_1c String
    price_vid_id Int
    // foreign keys
    product product @relation(fields: [product_id], references: [id])
    product_id Int
    size size @relation(fields: [size_id], references: [id])
    size_id Int
    registrator registrator? @relation(fields: [registrator_id], references: [id])
    registrator_id Int?
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
}

model qnt_registry { // регистр остатков
    id Int @id @default(autoincrement())
    qnt Float
    operation_date DateTime @db.Timestamptz
    // foreign keys
    store store @relation(fields: [store_id], references: [id])
    store_id Int
    product product @relation(fields: [product_id], references: [id])
    product_id Int
    size size @relation(fields: [size_id], references: [id])
    size_id Int
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
}

model qnt_price_registry {
    id Int @id @default(autoincrement())
    sum Float
    qnt Float
    size_name_1c String
    product_name String
    product_create_date DateTime? @db.Timestamptz
    operation_date DateTime @db.Timestamptz
    discount_percent Decimal?
    discount_begin DateTime? @db.Timestamptz
    discount_end DateTime? @db.Timestamptz
    // foreign keys
    store store @relation(fields: [store_id], references: [id])
    store_id Int    
    product product @relation(fields: [product_id], references: [id])
    product_id Int
    product_group product_group @relation(fields: [product_group_id], references: [id])
    product_group_id Int    
    price_vid price_vid @relation(fields: [price_vid_id], references: [id])
    price_vid_id Int
    vid_modeli vid_modeli? @relation(fields: [vid_modeli_id], references: [id])
    vid_modeli_id Int?
    size size @relation(fields: [size_id], references: [id])
    size_id Int
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz

    //@@index([registrator_id, product_group, product_id, size_id, sum])
    @@index([registrator_id])
}

model image_registry { // регистр изображений товаров
    id Int @id @default(autoincrement())
    resolution String? // разрешение по горизонтали
    full_name String // имя файла с полным путем
    name String @unique// имя файла  - нужно для проверки дублей при загрузке, одинаковое имя и размер файла - не загружаем повторно
    path String // путь до файла
    size Int // размер файла в байтах
    operation_date DateTime @db.Timestamptz    
    main Boolean  // использовать как основное изображение для карточки продукта
    main_change_date DateTime @db.Timestamptz    
    active Boolean // использовать ли этот пункт для отображения или отключить
    active_change_date DateTime @db.Timestamptz    
    // foreign keys
    product product @relation(fields: [product_id], references: [id])
    product_id Int
    registrator registrator @relation(fields: [registrator_id], references: [id])
    registrator_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
}

model registrator {
    id Int @id @default(autoincrement())
    operation_date DateTime @db.Timestamptz
    id_class String // id классификатора  <Классификатор><Ид>5057f421-546a-4373-a2d7-86f9d3951f15</Ид>
    name_class String //		<Наименование>Классификатор (Каталог товаров 5057F421)</Наименование>
    id_catalog String // id каталога <Каталог СодержитТолькоИзменения="false"><Ид>5057f421-546a-4373-a2d7-86f9d3951f15</Ид>
    name_catalog String // <Наименование>Каталог товаров 5057F421</Наименование>
    only_change Boolean // СодержитТолькоИзменения	:	false
    name_folder String // папка откуда загружено, нужно предварительно скопировать в папку с датой в имени
    name_file String // полный путь к файлу, откуда загружен
    ver_schema String // ВерсияСхемы="2.07"
    date_schema DateTime @db.Timestamptz // ДатаФормирования="2023-02-20T09:58:38">
    
    // foreign keys
    user user @relation(fields: [user_id], references: [id])
    user_id Int
    // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
    // used in 
    qnt_registry qnt_registry[]
    price_registry price_registry[]
    product product[]
    product_group product_group[]
    product_vid product_vid[]
    price_vid price_vid[]
    store store[]
    size size[]
    brend brend[]
    country country[]
    image_registry image_registry[]
    product_desc_mapping product_desc_mapping[]
    qnt_price_registry qnt_price_registry[]
    vid_modeli vid_modeli[]
}

model order {
    id Int @id @default(autoincrement())
    operation_date DateTime @db.Timestamptz
    user_auth Boolean // авторизован или нет
    email_not_auth String? // в случае не авторизованного
    phone_not_auth String? // в случае не авторизованного
    name_not_auth String? // в случае не авторизованного
    source String? // источник заказа - site, mobile
    status String? // статус заказа - init, cancel, success
        // foreign keys
    user user? @relation(fields: [user_id], references: [id])
    user_id Int?
        // date monitor
    create_date DateTime? @db.Timestamptz
    changed_date DateTime @updatedAt @db.Timestamptz
       // used in 
    cart cart[]
}

model news {
    id Int @id @default(autoincrement())
    operation_date DateTime @db.Timestamptz
    title String // заголовок
    data String // html текст
    image_path String? // путь до картинки
    // date monitor
    changed_date DateTime @updatedAt @db.Timestamptz
}


model cart {
    id Int @id @default(autoincrement())
    operation_date DateTime @db.Timestamptz
        // foreign keys
    order order @relation(fields: [order_id], references: [id])
    order_id Int
    product product @relation(fields: [product_id], references: [id])
    product_id Int
    size size @relation(fields: [size_id], references: [id])
    size_id Int
    qnt Int
    price Decimal
    discount Boolean    
    discount_percent Decimal?
    price_final Decimal
    // date monitor
    changed_date DateTime @updatedAt @db.Timestamptz
}
